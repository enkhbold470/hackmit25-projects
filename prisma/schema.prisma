generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id               String            @id @default(uuid())
  externalId       String            @unique
  dateTime         DateTime
  url              String
  orderStatus      String
  subTotal         Float
  total            Float
  currency         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  restaurantId     String?
  restaurant       Restaurant?       @relation(fields: [restaurantId], references: [id])
  orderProducts    OrderProduct[]
  paymentMethods   PaymentMethod[]
  priceAdjustments PriceAdjustment[]
}

model PaymentMethod {
  id                String  @id @default(uuid())
  externalId        String
  type              String
  brand             String?
  lastFour          String?
  transactionAmount String
  orderId           String
  order             Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model PriceAdjustment {
  id      String @id @default(uuid())
  type    String
  label   String
  amount  Float
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Product {
  id            String               @id @default(uuid())
  externalId    String               @unique
  name          String
  url           String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  orderProducts OrderProduct[]
  eligibilities ProductEligibility[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  quantity  Float
  subTotal  Float
  total     Float
  currency  String
  unitPrice Float
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
}

model ProductEligibility {
  id          String  @id @default(uuid())
  eligibility String
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, eligibility])
}

model Restaurant {
  id          String   @id @default(uuid())
  name        String   @unique
  cuisineType String?
  logo        String?
  merchantId  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Transaction {
  id        String   @id @default(uuid())
  amount    Int
  currency  String
  direction String
  metadata  Json
  source    String
  timestamp DateTime @default(now())
}

model User {
  id              String          @id @default(uuid())
  name            String
  avatar          String          @default("ðŸ˜Š")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  characterState  CharacterState?
  messages        GameMessage[]
  teamMemberships TeamMember[]
}

model Team {
  id        String       @id @default(uuid())
  name      String
  questId   String?      @unique
  power     Int          @default(78)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  quest     Quest?       @relation(fields: [questId], references: [id])
  members   TeamMember[]
}

model TeamMember {
  id     String @id @default(uuid())
  userId String
  teamId String
  status String @default("neutral")
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Quest {
  id        String   @id @default(uuid())
  name      String   @default("Defeat the Takeout Titan")
  startDate DateTime @default(now())
  endDate   DateTime
  status    String   @default("active")
  result    String?
  createdAt DateTime @default(now())
  team      Team?
}

model CharacterState {
  id        String   @id @default(uuid())
  userId    String   @unique
  health    Int      @default(85)
  status    String   @default("neutral")
  streak    Int      @default(3)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameMessage {
  id        String   @id @default(uuid())
  userId    String
  message   String
  type      String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
